/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import java.awt.FlowLayout;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author david
 */
public class Server extends javax.swing.JFrame {
    static Vector<String> data = new Vector<String>();
    static Vector<Vector<String>> sendData = new Vector<Vector<String>>();
    static ObjectInputStream ois = null;
    static ObjectOutputStream oos = null;
    static ServerSocket welcomeSocket;
    static JTextField t;
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Server");

        jLabel2.setText("Server is ready...");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
        
        ResultSet result = null;
        try {
            welcomeSocket = new ServerSocket(6789);
            while(true) {
                Socket connectionSocket = welcomeSocket.accept();
                ois = new ObjectInputStream(connectionSocket.getInputStream());
                data = (Vector) ois.readObject();
                if(data.elementAt(0).equals("ReadAll")){
                    jTextArea1.append("Server>>Client Request: ReadAll()\n");
                    result = Conexion.ReadAll();
                    while(result.next()){
                        data.clear();
                        data.add(Integer.toString(result.getInt("clave")));
                        data.add(result.getString("nombre"));
                        data.add(result.getString("sald"));
                        data.add(result.getString("diasl"));
                        data.add(result.getString("total"));
                        sendData.add((Vector<String>) data.clone());
                    }
                }
                if(data.elementAt(0).equals("Read")){
                    jTextArea1.append("Server>>Client Request: Read("+data.elementAt(1)+")\n");
                    result = Conexion.getEmpleado(Integer.parseInt(data.elementAt(1)));
                    data.clear();
                    data.add(Integer.toString(result.getInt("clave")));
                    data.add(result.getString("nombre"));
                    data.add(result.getString("sald"));
                    data.add(result.getString("diasl"));
                    data.add(result.getString("total"));
                    sendData.add(data);
                }
                if(data.elementAt(0).equals("Update")){
                    jTextArea1.append("Server>>Client Request: Update("+data.elementAt(1)+")\n");
                    int clave = Integer.parseInt(data.elementAt(1));
                    int sald = Integer.parseInt(data.elementAt(3));
                    int diasl = Integer.parseInt(data.elementAt(4));
                    int res = Conexion.editarTrabajador(clave, data.elementAt(2), sald, diasl);
                    data.clear();
                    data.add(Integer.toString(res));
                    sendData.add(data);
                }
                if(data.elementAt(0).equals("Create")){
                    jTextArea1.append("Server>>Client Request: Create()\n");
                    int clave = Integer.parseInt(data.elementAt(1));
                    int sald = Integer.parseInt(data.elementAt(3));
                    int diasl = Integer.parseInt(data.elementAt(4));
                    int res = Conexion.insertarTrabajador(clave, data.elementAt(2), sald, diasl);
                    data.clear();
                    data.add(Integer.toString(res));
                    sendData.add(data);
                    
                }
                if(data.elementAt(0).equals("Delete")){
                    jTextArea1.append("Server>>Client Request: Detete("+data.elementAt(1)+")\n");
                    Conexion.borrarTrabajador(Integer.parseInt(data.elementAt(1)));
                }
                oos = new ObjectOutputStream(connectionSocket.getOutputStream());
                oos.writeObject(sendData);
                sendData.clear();
                ois.close();
                oos.close();
                connectionSocket.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
